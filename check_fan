#!/bin/sh
#
# Monitoring check for Antminer Fan Status
#

usage () {
cat <<EOF
Check for Fan RPM Status of Antminer
Warning and Critical are in Nagios Threshold Format. (10, 10:, 10:20, ~:20, @10:20 etc.)
Usage: $0 [-p api_port] [-n fan_number] [-H hostname] [-w warning_rpm_range] [-c critical_rpm_range]
Command Summary:
  -c critical_threshold		Critical treshold (range) in RPM
  -n fan_number			Specify Fan number
  -H hostname			Antminer target
  -h				This help text
  -p api_port			Monitoring API Port (Default: 4028)
  -w warning_threshold		Warning threshold (range) in RPM

EOF
}

## default values
API_PORT=4028

## exit statuses recognized by Nagios
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3


## helper functions
die () {
  rc="$1"
  shift
  (echo -n "$me: ERROR: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
  exit $rc
}

have_command () {
  type "$1" >/dev/null 2>/dev/null
}

require_command () {
  if ! have_command "$1"; then
    die 3 "Could not find required command '$1' in system PATH. Aborting."
  fi
}

#
# check_range takes a value and a range string, returning successfully if an
# alert should be raised based on the range.  Range values are inclusive.
# Values may be integers or floats.
#
# Example usage:
#
# Generating an exit code of 1:
# check_range 5 2:8
#
# Generating an exit code of 0:
# check_range 1 2:8
#
# The function is borrowed from
# https://github.com/nagios-plugins/nagios-plugins/blob/master/plugins-scripts/utils.sh.in
check_range() {
	local v range yes no err decimal start end cmp match
	v="$1"
	range="$2"

	# whether to raise an alert or not
	yes=0
	no=1
	err=2

	# regex to match a decimal number
	decimal="-?([0-9]+\.?[0-9]*|[0-9]*\.[0-9]+)"

	# compare numbers (including decimals), returning true/false
	cmp() { awk "BEGIN{ if ($1) exit(0); exit(1)}"; }

	# returns successfully if the string in the first argument matches the
	# regex in the second
	match() { echo "$1" | grep -E -q -- "$2"; }

	# make sure value is valid
	if ! match "$v" "^$decimal$"; then
		unset -f cmp match
		return "$err"
	fi

	# make sure range is valid
	if ! match "$range" "^@?(~|$decimal)(:($decimal)?)?$"; then
		unset -f cmp match
		return "$err"
	fi

	# check for leading @ char, which negates the range
	if match $range '^@'; then
		range=${range#@}
		yes=1
		no=0
	fi

	# parse the range string
	if ! match "$range" ':'; then
		start=0
		end="$range"
	else
		start="${range%%:*}"
		end="${range#*:}"
	fi

	# do the comparison, taking positive ("") and negative infinity ("~")
	# into account
	if [ "$start" != "~" ] && [ "$end" != "" ]; then
		if cmp "$start <= $v" && cmp "$v <= $end"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	elif [ "$start" != "~" ] && [ "$end" = "" ]; then
		if cmp "$start <= $v"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	elif [ "$start" = "~" ] && [ "$end" != "" ]; then
		if cmp "$v <= $end"; then
			unset -f cmp match
			return "$no"
		else
			unset -f cmp match
			return "$yes"
		fi
	else
		unset -f cmp match
		return "$no"
	fi
}

get_api_value() {
	if VALUE=$(echo ${1} | sed -e 's/,/\n/g' | grep "${2}="); then
		echo $(echo $VALUE | cut -d "=" -f2 | sed "s/^ //;s/|$//")
		return 0
	else
		return 1
	fi
}

is_number() {
if ! [[ "$1" =~ ^[0-9]+$ ]]; then
	die 3 "This is not a number: ${1}"
fi
}

## parse command-line
while getopts ":c:n:H:hpw:" opt; do
	case ${opt} in
		c ) CRITICAL_RPM_RANGE=$OPTARG ;;
		n ) FAN_NUMBER=$OPTARG ;;
		H ) HOSTN=$OPTARG ;;
		h ) usage; exit 0 ;;
		p ) API_PORT=$OPTARG ;;
		w ) WARNING_RPM_RANGE=$OPTARG ;;
		\? ) usage
			echo "Invalid option: $OPTARG" 1>&2
			exit 0
			;;
		: )	usage
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			exit 0
			;;
	esac
done

## required parameter checking
if [ -z "${HOSTN}" ]; then
	die 3 "hostname not set. Type '$me -h' to get usage information."
fi
if [ -z "${FAN_NUMBER}" ]; then
	die 3 "fan number not set. Type '$me -h' to get usage information."
fi

## main
NETCAT="nc"

require_command $NETCAT

APISTATS=$(echo -n "stats" | ${NETCAT} $HOSTN $API_PORT | tr -d '\0')

KEY="fan${FAN_NUMBER}"
if ! FAN_RPM=$(get_api_value "$APISTATS" "$KEY");then
	die 3 "Value for ${KEY} does not exist in API output"
fi

if ! [[ "$FAN_RPM" =~ ^[0-9]+$ ]]; then
	die 3 "FAN_RPM is not a number: ${FAN_RPM}"
fi


STATUS="OK - FAN${FAN_NUMBER} ${FAN_RPM} RPM"
RETURN_VAL=$OK

# check WARNING range
if [[ -n $WARNING_RPM_RANGE ]]; then
	check_range "$FAN_RPM" "$WARNING_RPM_RANGE"
	RET=$?
	if [[ "$RET" -eq 2 ]]; then
		die 3 "Invalid warning range: ${WARNING_RPM_RANGE}"
	elif [[ "$RET" -eq 0 ]]; then
		STATUS="WARNING - FAN${FAN_NUMBER} ${FAN_RPM} RPM (range does not match: ${WARNING_RPM_RANGE})"
		RETURN_VAL=$WARNING
	fi
fi

# check CRITICAL range
check_range "$FAN_RPM" "$CRITICAL_RPM_RANGE"
RET=$?

if [[ -n $CRITICAL_RPM_RANGE ]]; then
	if [[ "$RET" -eq 2 ]]; then
		die 3 "Invalid critical range: ${CRITICAL_RPM_RANGE}"
	elif [[ "$RET" -eq 0 ]]; then
		STATUS="CRITICAL - FAN${FAN_NUMBER} ${FAN_RPM} RPM (range does not match: ${CRITICAL_RPM_RANGE})"
		RETURN_VAL=$CRITICAL
	fi
fi

PERFDATA="FAN${FAN_NUMBER}_RPM=${FAN_RPM};$WARNING_RPM_RANGE;$CRITICAL_RPM_RANGE"

echo "${STATUS} | ${PERFDATA}"

exit $RETURN_VAL
