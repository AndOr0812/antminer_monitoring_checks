#!/bin/sh
#
# Monitoring check for Antminer Fan Status
#

usage () {
cat <<EOF
Checks Fan RPM Status of Antminer
Usage: $0 [-t] [-p api_port] [-f fan_number] [-h hostname] [-w warning_rpm] [-c critical_rpm]
Command Summary:
  -c low[:high]		Critical treshold (range) in RPM
  -f fan_number		Specify Fan number (Default: all)
  -H hostname		Antminer target
  -h				This help text
  -p api_port		Monitoring API Port (Default: TCP 4028)
  -w low[:high]		Warning threshold (range) in RPM

EOF
}

## default values
API_PORT=4028
MAX_INT=9223372036854775807

## exit statuses recognized by Nagios
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3


## helper functions
die () {
  rc="$1"
  shift
  (echo -n "$me: ERROR: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
  exit $rc
}

warn () {
  (echo -n "$me: WARNING: ";
      if [ $# -gt 0 ]; then echo "$@"; else cat; fi) 1>&2
}

have_command () {
  type "$1" >/dev/null 2>/dev/null
}

require_command () {
  if ! have_command "$1"; then
    die 1 "Could not find required command '$1' in system PATH. Aborting."
  fi
}

is_absolute_path () {
    expr match "$1" '/' >/dev/null 2>/dev/null
}

is_number() {
if ! [[ "$1" =~ ^[0-9]+$ ]]; then
	die 1 "This is not a number: ${1}"
fi
}

init_range () {
LOWERMOST=0
UPPERMOST=$MAX_INT

if [[ -n "${1}" ]]; then
	LOWERMOST=${1%:*}
	UPPERMOST=${1#*:}

	if [[ $LOWERMOST -eq $UPPERMOST ]]; then
		UPPERMOST=$MAX_INT
	elif [[ $LOWERMOST -gt $UPPERMOST ]]; then
		exit 1
	fi
fi

is_number $LOWERMOST
is_number $UPPERMOST

echo "${LOWERMOST}:${UPPERMOST}"
}



is_value_within_range() {
LOWERMOST=${2%:*}
UPPERMOST=${2#*:}

if [ "$1" -ge "$LOWERMOST" -a "$1" -le "$UPPERMOST" ]; then
	RET=true;
else
	RET=false;
fi

echo $RET
}

## parse command-line
while getopts ":c:f:H:hpw:" opt; do
	case ${opt} in
		c ) CRITICAL_RPM_RANGE=$OPTARG ;;
		f ) FAN_NUMBER=$OPTARG ;;
		H ) HOSTN=$OPTARG ;;
		h ) usage; exit 0 ;;
		p ) API_PORT=$OPTARG ;;
		w ) WARNING_RPM_RANGE=$OPTARG ;;
		\? ) usage
			echo "Invalid option: $OPTARG" 1>&2
			exit 0
			;;
		: )	usage
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			exit 0
			;;
	esac
done

## required parameter checking
if [ -z "${HOSTN}" ]; then
	die 1 "hostname not set. Type '$me -h' to get usage information."
fi
if [ -z "${FAN_NUMBER}" ]; then
	die 1 "fan numbers not set. Type '$me -h' to get usage information."
fi

WARNING_RPM_RANGE=$(init_range "$WARNING_RPM_RANGE") || die 1 "Illegal range parameter"
CRITICAL_RPM_RANGE=$(init_range "$CRITICAL_RPM_RANGE") || die 1 "Illegal range parameter"

## main
NETCAT="nc"

require_command $NETCAT

APISTATS=$(echo -n "stats" | ${NETCAT} $HOSTN $API_PORT | tr -d '\0')
#read -r -d '' APISTATS < <(echo -n "stats" | nc $HOSTN $API_PORT)

FAN_RPM=`echo $APISTATS | sed -e 's/,/\n/g' | grep "fan${FAN_NUMBER}=" | cut -d "=" -f2`

if ! [[ "$FAN_RPM" =~ ^[0-9]+$ ]]; then
	die 1 "FAN_RPM is not a number: ${FAN_RPM}"
fi

# check values

IN_CRIT_RANGE=$(is_value_within_range "$FAN_RPM" "$CRITICAL_RPM_RANGE")
IN_WARN_RANGE=$(is_value_within_range "$FAN_RPM" "$WARNING_RPM_RANGE")

if [ "$IN_CRIT_RANGE" = false ]; then
	STATUS="CRITICAL - FAN${FAN} ${FAN_RPM} RPM (not in range ${CRITICAL_RPM_RANGE}"
elif [ "$IN_WARN_RANGE" = false ]; then
	STATUS="WARNING - FAN${FAN} ${FAN_RPM} RPM (not in range ${WARNING_RPM_RANGE}"
else
	STATUS="OK - FAN${FAN} ${FAN_RPM} RPM"
fi

PERFDATA="FAN_RPM=${FAN_RPM};$WARNING;$CRITICAL;0;"

echo "${STATUS} | ${PERFDATA}"

exit $OK
